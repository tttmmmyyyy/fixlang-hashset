module Test;

import HashSet;

test : IO ();
test = (
    eval *test_basic;
    eval *test_bench;
    pure()
);

test_basic : IO ();
test_basic = (
    let set = HashSet::empty(0)
                    .reserve(3)
                    .insert(0)
                    .insert(1)
                    .insert(2)
                    .erase(2).insert(2)
                    .insert(3)
                    .insert(4).erase(4)
                    .erase(5)
                    // Do nothing for 6
                    .insert(7).insert(7);

    eval assert_eq(|_|"case A-0", set.contains(0), true);
    eval assert_eq(|_|"case A-1", set.contains(1), true);
    eval assert_eq(|_|"case A-2", set.contains(2), true);
    eval assert_eq(|_|"case A-3", set.contains(3), true);
    eval assert_eq(|_|"case A-4", set.contains(4), false);
    eval assert_eq(|_|"case A-5", set.contains(5), false);
    eval assert_eq(|_|"case A-6", set.contains(6), false);
    eval assert_eq(|_|"case A-7", set.contains(7), true);

    eval assert_eq(|_|"case B", set.get_size, 5);
    
    let set = HashSet::from_iter([1, 1, 2, 3].to_iter);

    eval assert_eq(|_|"case C-0", set.contains(0), false);
    eval assert_eq(|_|"case c-1", set.contains(1), true);
    eval assert_eq(|_|"case C-2", set.contains(2), true);
    eval assert_eq(|_|"case C-3", set.contains(3), true);
    eval assert_eq(|_|"case C-4", set.contains(4), false);

    eval assert_eq(|_|"case D", set.get_size, 3);

    let set: HashSet I64 = HashSet::from_iter([].to_iter);
    eval assert_eq(|_|"case E", set.get_size, 0);

    let set0 = HashSet::from_iter([1, 2, 3].to_iter);
    let set1 = HashSet::from_iter([3, 4, 5].to_iter);
    let set = set0.intersect(set1);
    eval assert_eq(|_|"case F", set.to_iter, [3].to_iter);

    let set0 = HashSet::from_iter([1, 2, 3].to_iter);
    let set1 = HashSet::from_iter([4, 5, 6].to_iter);
    let set = set0.intersect(set1);
    eval assert_eq(|_|"case G", set.to_iter, [].to_iter);

    let set0 = HashSet::from_iter([1, 2, 3].to_iter);
    let set1 = HashSet::from_iter([].to_iter);
    let set = set0.intersect(set1);
    eval assert_eq(|_|"case H", set.to_iter, [].to_iter);

    let set0: HashSet I64 = HashSet::from_iter([].to_iter);
    let set1 = HashSet::from_iter([].to_iter);
    let set = set0.intersect(set1);
    eval assert_eq(|_|"case I", set.to_iter, [].to_iter);

    let set0 = HashSet::from_iter([1, 2, 3].to_iter);
    let set1 = HashSet::from_iter([3, 4, 5].to_iter);
    let set = set0.merge(set1);
    eval assert_eq(|_|"case J", set.to_iter.to_array.sort_by(|(lhs, rhs)| lhs < rhs), [1, 2, 3, 4, 5]);

    let set0 = HashSet::from_iter([1, 2, 3].to_iter);
    let set1 = HashSet::from_iter([].to_iter);
    let set = set0.merge(set1);
    eval assert_eq(|_|"case K", set.to_iter.to_array.sort_by(|(lhs, rhs)| lhs < rhs), [1, 2, 3]);

    let set0: HashSet I64 = HashSet::from_iter([].to_iter);
    let set1 = HashSet::from_iter([].to_iter);
    let set = set0.merge(set1);
    eval assert_eq(|_|"case L", set.to_iter, [].to_iter);

    pure()
);

test_bench : IO ();
test_bench = (
    let n = 1000000;

    // Insert integers in [0, n) to HashSet.
    let (mp, insert_time) = consumed_time_while_lazy(|_|(
        let mp = HashSet::empty(n);
        loop((mp, 0), |(mp, i)| (
            if i == n { break $ mp };
            let mp = mp.insert(i);
            continue $ (mp, i+1)
        ))
    ));

    eval *("Insert : " + insert_time.to_string + " secs").println;

    // Search n integers from HashSet.
    let ((), search_time) = consumed_time_while_lazy(|_|(
        loop(0, |i| (
            if i == n { break $ () };
            eval if i % 2 == 0 { 
                assert(|_|"mp not cotains " + i.to_string, mp.contains(i))
            } else {
                assert(|_|"mp contains " + i.to_string, !mp.contains(i+n))
            };
            continue $ i + 1
        ))
    ));

    eval *("Search : " + search_time.to_string + " secs").println;

    eval *("Total : " + (insert_time + search_time).to_string + " secs").println;

    pure()
);
